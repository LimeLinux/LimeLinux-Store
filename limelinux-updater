#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#
#  Copyright 2016 Fatih KAYA <sonakinci41@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA

import sys
import os
from PyQt5.QtCore import *
from PyQt5.QtNetwork import *
from PyQt5.QtWidgets import *
import pisi.api
import pisi.db
from dbus.mainloop.glib import DBusGMainLoop
import comar
from limestorelib import resource
from limestorelib.updater import UpdaterWindow


class SingleApplication(QObject):

    newInstance = pyqtSignal()
    urlPost = pyqtSignal(str)

    def __init__(self):
        super(SingleApplication, self).__init__()
        self.mServer = QLocalServer()
        self.mServer.newConnection.connect(self.newConnection)

    def listen(self, client):
        self.mServer.removeServer(client)
        self.mServer.listen(client)
        print(self.mServer.errorString())

    def hasPrevious(self, name, args):
        socket = QLocalSocket()
        socket.connectToServer(name, QLocalSocket.ReadWrite)
        if socket.waitForConnected():
            if len(args) > 1:
                socket.write(args[1])

            else:
                pass

            socket.flush()
            return True

        return False

    def newConnection(self):
        self.newInstance.emit()
        self.mSocket = self.mServer.nextPendingConnection()
        self.mSocket.readyRead.connect(self.readyRead)

    def readyRead(self):
        self.urlPost.emit(str(self.mSocket.readAll()))
        self.mSocket.close()


def main():
    uyg = QApplication(sys.argv)
    uyg.setQuitOnLastWindowClosed(False)
    locale = QLocale.system().name()
    translator = QTranslator(uyg)
    translator.load("/usr/share/limelinux-store/languages/{}.qm".format(locale))
    uyg.installTranslator(translator)

    single = SingleApplication()
    if single.hasPrevious("limelinux-updater", uyg.arguments()):
        return False

    single.listen("limelinux-updater")

    ana = UpdaterWindow()
#    ana.show()
    sys.exit(uyg.exec_())

if __name__ == "__main__":
    main()